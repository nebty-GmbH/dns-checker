"""
Django settings for dns_checker project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import logging
from pathlib import Path
from typing import cast

import dj_database_url
import sentry_sdk
from celery.schedules import crontab
from decouple import config
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY",
    default="django-insecure-u$afcp@6jvm4t!dpz$!&#8y2ijrou85b=8hyt#*do6k+-2##be",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS_STR = cast(
    str, config("ALLOWED_HOSTS", default="localhost,127.0.0.1", cast=str)
)
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STR.split(",")]

# Add testserver for Django test client
ALLOWED_HOSTS.append("testserver")

# Add your Dokku domain
DOKKU_DOMAIN = cast(str, config("DOKKU_DOMAIN", default="", cast=str))
if DOKKU_DOMAIN:
    ALLOWED_HOSTS.append(cast(str, DOKKU_DOMAIN))

# CSRF trusted origins for cross-origin requests
CSRF_TRUSTED_ORIGINS_STR = cast(
    str, config("CSRF_TRUSTED_ORIGINS", default="", cast=str)
)
CSRF_TRUSTED_ORIGINS = []
if CSRF_TRUSTED_ORIGINS_STR:
    CSRF_TRUSTED_ORIGINS = [
        origin.strip() for origin in CSRF_TRUSTED_ORIGINS_STR.split(",")
    ]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_celery_beat",
    "monitor",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "dns_checker.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "dns_checker.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use DATABASE_URL if available (for Dokku/Heroku), otherwise fallback to SQLite
DATABASE_URL = cast(str, config("DATABASE_URL", default=""))
# Enable persistent DB connections to reduce connection overhead in admin views
CONN_MAX_AGE = cast(int, config("CONN_MAX_AGE", default=60, cast=int))
if DATABASE_URL:
    # Pass conn_max_age to enable persistent connections when using dj_database_url
    DATABASES = {
        "default": dj_database_url.parse(
            cast(str, DATABASE_URL), conn_max_age=CONN_MAX_AGE
        )
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
            "CONN_MAX_AGE": CONN_MAX_AGE,
        }
    }

# Celery Configuration
CELERY_BROKER_URL = config("REDIS_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = config("REDIS_URL", default="redis://localhost:6379/0")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# Celery Beat Schedule - Use database scheduler for dynamic configuration
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# Default schedule (will be overridden by database settings)
CELERY_BEAT_SCHEDULE = {
    "check-all-domains": {
        "task": "monitor.tasks.schedule_domain_checks",
        "schedule": crontab(minute="*/15"),  # Fallback: Every 15 minutes
    },
}

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "dns_checker.log",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "monitor": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": True,
        },
        "monitor.admin": {
            "handlers": ["file", "console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# WhiteNoise configuration for serving static files
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Django REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "monitor.authentication.APIKeyAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
}

# Proxy configuration for deployment behind reverse proxy
USE_X_FORWARDED_HOST = config("USE_X_FORWARDED_HOST", default=False, cast=bool)
USE_X_FORWARDED_PORT = config("USE_X_FORWARDED_PORT", default=False, cast=bool)

# Configure Django to trust proxy SSL headers
SECURE_PROXY_SSL_HEADER_STR = cast(
    str, config("SECURE_PROXY_SSL_HEADER", default="", cast=str)
)
if SECURE_PROXY_SSL_HEADER_STR:
    header_parts = SECURE_PROXY_SSL_HEADER_STR.split(",", 1)
    if len(header_parts) == 2:
        SECURE_PROXY_SSL_HEADER = (header_parts[0].strip(), header_parts[1].strip())

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = config("SECURE_SSL_REDIRECT", default=True, cast=bool)
    SECURE_HSTS_SECONDS = config("SECURE_HSTS_SECONDS", default=31536000, cast=int)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = config(
        "SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True, cast=bool
    )
    SECURE_HSTS_PRELOAD = config("SECURE_HSTS_PRELOAD", default=True, cast=bool)
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = "DENY"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Sentry configuration (Error monitoring + Structured Logs)
# Configure via environment variables to avoid hard-coding secrets.
SENTRY_DSN = cast(str, config("SENTRY_DSN", default="", cast=str))
SENTRY_ENVIRONMENT = cast(
    str,
    config(
        "SENTRY_ENVIRONMENT",
        default=("development" if DEBUG else "production"),
        cast=str,
    ),
)

if SENTRY_DSN:
    # Configure thresholds via environment variables (optional)
    # SENTRY_LOG_LEVEL controls Python logging level captured as breadcrumbs/events
    # SENTRY_EVENT_LEVEL controls level that is sent as error events
    SENTRY_LOG_LEVEL_STR = cast(
        str, config("SENTRY_LOG_LEVEL", default="INFO", cast=str)
    ).upper()
    SENTRY_EVENT_LEVEL_STR = cast(
        str, config("SENTRY_EVENT_LEVEL", default="ERROR", cast=str)
    ).upper()

    LOG_LEVEL_MAP = {
        "TRACE": 5,  # custom lower than DEBUG if used
        "DEBUG": logging.DEBUG,
        "INFO": logging.INFO,
        "WARNING": logging.WARNING,
        "ERROR": logging.ERROR,
        "FATAL": logging.FATAL,
        "CRITICAL": logging.CRITICAL,
    }

    # Configure LoggingIntegration for structured logs
    sentry_logging = LoggingIntegration(
        level=LOG_LEVEL_MAP.get(
            SENTRY_LOG_LEVEL_STR, logging.INFO
        ),  # What gets captured as breadcrumbs
        event_level=LOG_LEVEL_MAP.get(
            SENTRY_EVENT_LEVEL_STR, logging.ERROR
        ),  # What gets sent as events
        sentry_logs_level=LOG_LEVEL_MAP.get(
            SENTRY_LOG_LEVEL_STR, logging.INFO
        ),  # What gets sent to Sentry Logs
    )

    # Structured Logs (Sentry Logs beta) - enable via experiment flag
    ENABLE_SENTRY_LOGS = cast(
        bool, config("SENTRY_ENABLE_LOGS", default=True, cast=bool)
    )

    # Optional: Custom log filtering function
    def before_send_log(log, hint):
        """
        Filter or modify logs before sending to Sentry.
        Return None to discard the log, or return the modified log.
        """
        # Example: Filter out health check logs
        if "health" in log.get("body", "").lower():
            return None

        # Example: Add custom attributes
        if log.get("severity_text") == "error":
            log.setdefault("attributes", {})["team"] = "dns-monitoring"

        return log

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(
                transaction_style="url",  # Track transactions by URL
                middleware_spans=True,  # Create spans for middleware
                signals_spans=True,  # Create spans for Django signals
            ),
            CeleryIntegration(
                monitor_beat_tasks=True,  # Monitor Celery beat tasks
                propagate_traces=True,  # Propagate traces from web to tasks
            ),
            sentry_logging,
        ],
        send_default_pii=True,  # Include user information
        environment=SENTRY_ENVIRONMENT,
        # Enable experimental features
        _experiments={
            "enable_logs": ENABLE_SENTRY_LOGS,
            "before_send_log": before_send_log if ENABLE_SENTRY_LOGS else None,
        },
        # Performance monitoring
        traces_sample_rate=0.1,  # 10% of transactions for performance monitoring
        profiles_sample_rate=0.1,  # 10% for profiling
    )
